import heapq

# Class representing each state of the puzzle
class PuzzleState:
    def __init__(self, puzzle, parent=None):
        self.puzzle = puzzle
        self.parent = parent
        self.depth = 0
        if parent:
            self.depth = parent.depth + 1

    # Generate possible moves
    def generate_moves(self):
        moves = []
        zero_index = self.puzzle.index(0)
        row, col = zero_index // 3, zero_index % 3
        
        for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_index = new_row * 3 + new_col
                new_puzzle = self.puzzle[:]
                new_puzzle[zero_index], new_puzzle[new_index] = new_puzzle[new_index], new_puzzle[zero_index]
                moves.append(PuzzleState(new_puzzle, self))
        
        return moves

    # Manhattan distance heuristic
    def manhattan_distance(self):
        distance = 0
        for i in range(1, 9):
            current_row, current_col = self.puzzle.index(i) // 3, self.puzzle.index(i) % 3
            goal_row, goal_col = (i - 1) // 3, (i - 1) % 3
            distance += abs(current_row - goal_row) + abs(current_col - goal_col)
        return distance

    # Comparison method for heapq
    def __lt__(self, other):
        return self.manhattan_distance() < other.manhattan_distance()

# Best-first search algorithm
def best_first_search(initial_state):
    visited = set()
    frontier = []
    heapq.heappush(frontier, initial_state)

    while frontier:
        current_state = heapq.heappop(frontier)

        if current_state.puzzle == goal_state:
            return current_state

        visited.add(tuple(current_state.puzzle))

        for move in current_state.generate_moves():
            if tuple(move.puzzle) not in visited:
                heapq.heappush(frontier, move)

    return None

# Initial and goal states
initial_state = [1, 2, 3, 4, 5, 0, 7, 8, 6]
goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]

# Solve the puzzle
solution = best_first_search(PuzzleState(initial_state))
if solution:
    path = []
    current = solution
    while current:
        path.append(current.puzzle)
        current = current.parent
    path.reverse()
    print("Solution found in {} moves:".format(len(path) - 1))
    for state in path:
        print(state)
else:
    print("No solution found.")
